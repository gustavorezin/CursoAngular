package com.midas.api.controller;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.CachePut;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.google.gson.Gson;
import com.midas.api.model.Usuario;
import com.midas.api.model.UsuarioDTO;
import com.midas.api.repository.UsuarioRepository;

@RestController // Arquitetura REST
@RequestMapping(value = "/usuario")
public class IndexController {
	
	@Autowired
	private UsuarioRepository usuarioRp;
	
	// METODO GET #################################################################################
	
	// Servi√ßo restfull - consultar ID
	@GetMapping(value = "/{id}", produces = "application/json")
	public ResponseEntity<UsuarioDTO> init(@PathVariable(value="id") Long id) {
		
		Optional<Usuario> usuario = usuarioRp.findById(id);
		
		return new ResponseEntity<UsuarioDTO>(new UsuarioDTO(usuario.get()), HttpStatus.OK);
	}
	
	// Consulta todos os users
	@GetMapping(value = "/", produces = "application/json")
	@CacheEvict(value = "cacheusuarios", allEntries = true)
	@CachePut("cacheusuarios")
	public ResponseEntity<List<Usuario>> usuario() throws InterruptedException {
		
		List<Usuario> listUsuarios = (List<Usuario>) usuarioRp.findAll();
	
		return new ResponseEntity<List<Usuario>>(listUsuarios, HttpStatus.OK);
	}
	
	// METODO POST ################################################################################
	
	@PostMapping(value = "/", produces = "application/json")
	public ResponseEntity<Usuario> cadastrar(@RequestBody Usuario usuario) throws Exception {
		
		// amarrar os telefones ao usuario
		for(int pos = 0; pos < usuario.getListTelefones().size(); pos++) {
			usuario.getListTelefones().get(pos).setUsuario(usuario);
		}
		
		// consumindo API externa
		URL url = new URL("https://viacep.com.br/ws/" + usuario.getCep() +"/json/");
		URLConnection connection = url.openConnection();
		InputStream is = connection.getInputStream();
		BufferedReader br = new BufferedReader(new InputStreamReader(is, "UTF-8"));
		
		String cep = "";
		StringBuilder jsonCep = new StringBuilder();
		while((cep = br.readLine()) != null) {
			jsonCep.append(cep);
		}
		
		System.out.println(jsonCep.toString());
		
		Usuario userAux = new Gson().fromJson(jsonCep.toString(), Usuario.class);
		
		usuario.setCep(userAux.getCep());
		usuario.setLogradouro(userAux.getLogradouro());
		usuario.setComplemento(userAux.getComplemento());
		usuario.setBairro(userAux.getBairro());
		usuario.setLocalidade(userAux.getLocalidade());
		usuario.setUf(userAux.getUf());
		
		// consumindo API externa - fim
		
		String senhacrypt = new BCryptPasswordEncoder().encode(usuario.getSenha());
		usuario.setSenha(senhacrypt);
		
		Usuario usuariosalvo = usuarioRp.save(usuario);
		
		return new ResponseEntity<Usuario>(usuariosalvo, HttpStatus.OK);
	}
	
	// METODO PUT #################################################################################
	
	@PutMapping(value = "/", produces = "application/json")
	public ResponseEntity<Usuario> atualizar(@RequestBody Usuario usuario){
		
		// amarrar os telefones ao usuario
		for(int pos = 0; pos < usuario.getListTelefones().size(); pos++) {
			usuario.getListTelefones().get(pos).setUsuario(usuario);
		}
		
		Usuario userTemporario = usuarioRp.findUserById(usuario.getId());
		
		if (!userTemporario.getSenha().equals(usuario.getSenha())) { // Senhas diferentes
			String senhacriptografada = new BCryptPasswordEncoder().encode(usuario.getSenha());
			usuario.setSenha(senhacriptografada);
		}
		
		
		Usuario usuarioatualiza = usuarioRp.save(usuario);
		
		return new ResponseEntity<Usuario>(usuarioatualiza, HttpStatus.OK);
	}
	
	// METODO DELETE ##############################################################################
	
	@DeleteMapping(value = "/{id}", produces = "application/json")
	public ResponseEntity<?> delete(@PathVariable("id") Long id) {
		
		usuarioRp.deleteById(id);
		
		return ResponseEntity.ok(HttpStatus.OK);
	}
}
